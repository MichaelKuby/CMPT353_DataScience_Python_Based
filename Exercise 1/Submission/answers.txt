1.  Where you did the same calculations with NumPy and Pandas, which did you     find easier to work with? Which code do you think is easier to read?        In general I found NumPy easier to work with because there are less aspects    of the library to know, learn, and understand. Pandas is generally    more complicated: Working with groupby objects was slightly more challenging    than working dataframes; I ended up in a situation where I had multiple    headers and needed to delete one of them; and pushing and pulling data around    in a matrix as opposed to an array is just generally more confusing.2.  What were the running times of the two pivot_months_* functions?     How can you explain the difference?        pivot_months_pandas had a run time of:    13.9 ms ± 361 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)        pivot_months_loops had a run time of:    327 ms ± 1.66 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)        The difference is explained in the underlying architecture of the code:    pivot_months_loops is written using python code that is not optimized for    data analytics in the sense that arrays are pointers to data objects. This    architecture is slow for our purposes as it allows for python lists to     contain heterogenous data types that are stored non-contiguously in memory.        In contrast, pivot_months_pandas uses pandas, whose underlying architecture    is Numpy, which is C code whereby arrays are containers that store     homogenous values contiguously in memory. This allows the computer    hardware to access and manipulate the data orders of magnitude faster.